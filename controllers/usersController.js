const User = require('../models/User');
const OTP = require('../models/OTP'); // Gi·∫£ ƒë·ªãnh OTP model v·∫´n ƒë∆∞·ª£c s·ª≠ d·ª•ng n·∫øu c√≥ ch·ª©c nƒÉng li√™n quan ƒë·∫øn OTP
const bcrypt = require('bcrypt');
const mongoose = require('mongoose');
const { generateToken } = require('../utils/token'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng
const crypto = require('crypto'); // Import module crypto ƒë·ªÉ t·∫°o chu·ªói ng·∫´u nhi√™n

// H√†m ti·ªán √≠ch ƒë·ªÉ chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i
// V√≠ d·ª•: chuy·ªÉn '0389456321' th√†nh '389456321' ho·∫∑c ng∆∞·ª£c l·∫°i, t√πy theo chu·∫©n b·∫°n mu·ªën l∆∞u
const normalizePhoneNumber = (phone) => {
    if (!phone) return phone;
    // Lo·∫°i b·ªè t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
    let cleanedPhone = phone.replace(/\D/g, '');

    // N·∫øu s·ªë ƒëi·ªán tho·∫°i b·∫Øt ƒë·∫ßu b·∫±ng '0' v√† c√≥ 10 ch·ªØ s·ªë (chu·∫©n VN)
    if (cleanedPhone.startsWith('0') && cleanedPhone.length === 10) {
        return cleanedPhone; // Gi·ªØ nguy√™n '0'
    }
    // N·∫øu s·ªë ƒëi·ªán tho·∫°i c√≥ 9 ch·ªØ s·ªë (v√≠ d·ª•: '389456321') v√† b·∫°n mu·ªën l∆∞u c√≥ '0'
    else if (cleanedPhone.length === 9 && !cleanedPhone.startsWith('0')) {
        return '0' + cleanedPhone; // Th√™m '0' v√†o ƒë·∫ßu
    }
    // Ho·∫∑c n·∫øu b·∫°n mu·ªën lu√¥n lo·∫°i b·ªè '0' ƒë·∫ßu n·∫øu c√≥ (v√≠ d·ª•: chuy·ªÉn 038... th√†nh 38...)
    // else if (cleanedPhone.startsWith('0') && cleanedPhone.length > 1) {
    //     return cleanedPhone.substring(1);
    // }
    return cleanedPhone; // Tr·∫£ v·ªÅ nh∆∞ c≈© n·∫øu kh√¥ng kh·ªõp quy t·∫Øc
};


// --- Qu·∫£n l√Ω ng∆∞·ªùi d√πng chung (Parent v√† Subuser) --- //

/**
 * @desc L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng trong h·ªá th·ªëng (bao g·ªìm c·∫£ parent v√† subuser).
 * @route GET /api/users/users
 * @access Public (c√≥ th·ªÉ c·∫ßn auth cho production)
 */
exports.getAllUsers = async (req, res) => {
    try {
        // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng v√† ·∫©n tr∆∞·ªùng password
        const users = await User.find().select('-password');

        res.status(200).json({
            success: true,
            message: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng.',
            users
        });
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch user:', err);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng.'
        });
    }
};

// --- ƒêƒÉng k√Ω v√† ƒêƒÉng nh·∫≠p t√†i kho·∫£n ch√≠nh (Parent) --- //

/**
 * @desc ƒêƒÉng k√Ω t√†i kho·∫£n Parent m·ªõi.
 * @route POST /api/users/register
 * @access Public
 */
// File controller/route c·ªßa b·∫°n, v√≠ d·ª•: userController.js ho·∫∑c authController.js

exports.registerParent = async (req, res) => {
    try {
        const { email, password } = req.body; // <--- L·∫•y m·∫≠t kh·∫©u plaintext t·ª´ request

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ success: false, message: 'Email ƒë√£ t·ªìn t·∫°i.' });
        }

        // ‚ùå X√ìA D√íNG N√ÄY (ho·∫∑c comment n√≥ l·∫°i):
        // const hashedPassword = await bcrypt.hash(password, 10);

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi role 'parent' v√† t·ª± ƒë·ªông x√°c minh
        // --> TRUY·ªÄN M·∫¨T KH·∫®U PLAINTEXT TR·ª∞C TI·∫æP V√ÄO ƒê√ÇY <--
        const newUser = await User.create({
            email,
            password: password, // <--- C·∫ßn thay th·∫ø hashedPassword b·∫±ng 'password' (plaintext)
            isVerified: true, // T·ª± ƒë·ªông x√°c minh cho t√†i kho·∫£n parent
            role: 'parent'
        });

        // (Ph·∫ßn t·∫°o token v√† tr·∫£ v·ªÅ response gi·ªØ nguy√™n n·∫øu c√≥)
        // N·∫øu b·∫°n c√≥ t·∫°o token ·ªü ƒë√¢y, h√£y ƒë·∫£m b·∫£o r·∫±ng newUser ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o DB (v√† password ƒë√£ ƒë∆∞·ª£c hash)
        // tr∆∞·ªõc khi b·∫°n t·∫°o token n·∫øu token c·∫ßn th√¥ng tin v·ªÅ user_id.
        // V√≠ d·ª•:
        // const token = generateToken({ userId: newUser._id, role: newUser.role });


        res.status(201).json({
            success: true,
            message: 'ƒêƒÉng k√Ω t√†i kho·∫£n ch√≠nh th√†nh c√¥ng.',
            // ... (c√°c th√¥ng tin user tr·∫£ v·ªÅ)
            user: {
                _id: newUser._id,
                email: newUser.email,
                fullname: newUser.fullname || '',
                numberphone: newUser.numberphone || '',
                image: newUser.image || ''
            }
        });

    } catch (err) {
        console.error('L·ªói ƒëƒÉng k√Ω t√†i kho·∫£n ch√≠nh:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi ƒëƒÉng k√Ω t√†i kho·∫£n ch√≠nh.' });
    }
};

/**
 * @desc ƒêƒÉng nh·∫≠p t√†i kho·∫£n Parent.
 * @route POST /api/users/login
 * @access Public
 */
exports.loginParent = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log(`[LOGIN_PARENT] üì• Nh·∫≠n y√™u c·∫ßu ƒëƒÉng nh·∫≠p cho email: ${email}`);
        // C·∫¢NH B√ÅO: CH·ªà D√ôNG ƒê·ªÇ G·ª† L·ªñI C·ª§C B·ªò. ƒê·ª™NG BAO GI·ªú D√ôNG TRONG PRODUCTION!
        console.log(`[DEBUG] M·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p (plaintext): ${password}`);


        // Ki·ªÉm tra ƒë·∫ßy ƒë·ªß th√¥ng tin
        if (!email || !password) {
            console.log(`[LOGIN_PARENT] ‚ùå L·ªói 400: Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u cho email: ${email || 'kh√¥ng x√°c ƒë·ªãnh'}.`);
            return res.status(400).json({ success: false, message: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u.' });
        }

        // T√¨m ng∆∞·ªùi d√πng v·ªõi email v√† role 'parent'
        const user = await User.findOne({ email, role: 'parent' });
        if (!user) {
            console.log(`[LOGIN_PARENT] ‚ùå L·ªói 400: Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n parent v·ªõi email: ${email} ho·∫∑c sai m·∫≠t kh·∫©u.`);
            return res.status(400).json({ success: false, message: 'Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.' });
        }
        console.log(`[LOGIN_PARENT] ‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng: ${user._id}, isSuspended: ${user.isSuspended} cho email: ${email}`);
        // C·∫¢NH B√ÅO: CH·ªà D√ôNG ƒê·ªÇ G·ª† L·ªñI C·ª§C B·ªò. ƒê·ª™NG BAO GI·ªú D√ôNG TRONG PRODUCTION!
        console.log(`[DEBUG] M·∫≠t kh·∫©u ƒë√£ hash trong DB: ${user.password}`);


        // --- B·∫ÆT ƒê·∫¶U TH√äM KI·ªÇM TRA isSuspended ---
        if (user.isSuspended) {
            console.log(`[LOGIN_PARENT] ‚ùå L·ªói 403: T√†i kho·∫£n '${email}' ƒë√£ b·ªã ƒë√¨nh ch·ªâ. ID ng∆∞·ªùi d√πng: ${user._id}`);
            return res.status(403).json({ success: false, message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã ƒë√¨nh ch·ªâ. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.' });
        }
        // --- K·∫æT TH√öC TH√äM KI·ªÇM TRA isSuspended ---


        // So s√°nh m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            console.log(`[LOGIN_PARENT] ‚ùå L·ªói 400: M·∫≠t kh·∫©u kh√¥ng kh·ªõp cho email: ${email}.`);
            return res.status(400).json({ success: false, message: 'Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.' });
        }
        console.log(`[LOGIN_PARENT] ‚úÖ M·∫≠t kh·∫©u kh·ªõp cho email: ${email}.`);


        // T·∫°o JWT token
        const token = generateToken({ userId: user._id, role: user.role });
        console.log(`[LOGIN_PARENT] ‚úÖ ƒê√£ t·∫°o JWT token cho ng∆∞·ªùi d√πng: ${user._id}.`);


        // B·∫°n c√≥ th·ªÉ c√¢n nh·∫Øc l∆∞u token v√†o cookie n·∫øu mu·ªën qu·∫£n l√Ω phi√™n t·ª´ server-side
        // res.cookie('token', token, {
        //     httpOnly: true,
        //     secure: process.env.NODE_ENV === 'production',
        //     maxAge: 24 * 60 * 60 * 1000
        // });

        res.status(200).json({
            success: true,
            message: 'ƒêƒÉng nh·∫≠p t√†i kho·∫£n ch√≠nh th√†nh c√¥ng!',
            token, // Tr·∫£ v·ªÅ token cho client
            user: {
                _id: user._id,
                email: user.email,
                role: user.role,
                isVerified: user.isVerified,
                fullname: user.fullname,
                numberphone: user.numberphone,
                image: user.image
            }
        });
        console.log(`[LOGIN_PARENT] ‚ú® ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho email: ${email}.`);

    } catch (err) {
        console.error(`[LOGIN_PARENT] ‚ùå L·ªói Server 500 khi ƒëƒÉng nh·∫≠p t√†i kho·∫£n ch√≠nh cho email: ${req.body.email || 'kh√¥ng x√°c ƒë·ªãnh'}. Chi ti·∫øt l·ªói:`, err);
        res.status(500).json({ success: false, message: 'L·ªói server khi ƒëƒÉng nh·∫≠p t√†i kho·∫£n ch√≠nh.' });
    }
};

// --- Qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n (Parent ho·∫∑c Subuser) --- //

/**
 * @desc C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (fullname, numberphone, image).
 * @route POST /api/users/update
 * @access Private (c·∫ßn x√°c th·ª±c)
 */
exports.updateUser = async (req, res) => {
    try {
        const { _id, fullname, numberphone, image } = req.body;

        // Ki·ªÉm tra ID h·ª£p l·ªá
        if (!_id || !mongoose.Types.ObjectId.isValid(_id)) {
            return res.status(400).json({ success: false, message: 'ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.' });
        }

        // T√¨m ng∆∞·ªùi d√πng theo ID
        const user = await User.findById(_id);
        if (!user) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng n·∫øu c√≥
        if (fullname !== undefined) user.fullname = fullname;
        // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi l∆∞u
        if (numberphone !== undefined) user.numberphone = normalizePhoneNumber(numberphone);
        if (image !== undefined) user.image = image;

        await user.save();

        res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng.',
            user
        });
    } catch (err) {
        console.error('L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng.' });
    }
};

/**
 * @desc Upload ·∫£nh ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng.
 * @route POST /api/users/upload-avatar
 * @access Private (c·∫ßn x√°c th·ª±c)
 * @note Y√™u c·∫ßu middleware `upload.single('avatar')` tr∆∞·ªõc khi g·ªçi controller n√†y.
 */
exports.uploadAvatar = async (req, res) => {
    try {
        // L·∫•y userId t·ª´ body ho·∫∑c t·ª´ token x√°c th·ª±c (t√πy thu·ªôc v√†o c√°ch b·∫°n thi·∫øt k·∫ø middleware x√°c th·ª±c)
        // V√≠ d·ª•: const userId = req.user.id; n·∫øu b·∫°n c√≥ middleware x√°c th·ª±c JWT
        const { userId } = req.body; // T·∫°m th·ªùi l·∫•y t·ª´ body, n√™n l·∫•y t·ª´ req.user.id trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø

        if (!userId || !mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ success: false, message: 'ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.' });
        }

        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }

        // Ki·ªÉm tra xem c√≥ file ·∫£nh ƒë∆∞·ª£c upload kh√¥ng
        if (!req.file) {
            return res.status(400).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y file ·∫£nh.' });
        }

        // L∆∞u ƒë∆∞·ªùng d·∫´n file (ƒë∆∞·ªùng d·∫´n n√†y ph·ª• thu·ªôc v√†o c·∫•u h√¨nh Multer c·ªßa b·∫°n)
        const imagePath = `/uploads/${req.file.filename}`;
        user.image = imagePath;
        await user.save();

        // T·∫°o JWT token m·ªõi sau khi c·∫≠p nh·∫≠t avatar (ƒë·ªÉ ƒë·∫£m b·∫£o token c√≥ th√¥ng tin image m·ªõi nh·∫•t n·∫øu c·∫ßn)
        const token = generateToken({ userId: user._id, role: user.role });

        res.status(200).json({
            success: true,
            message: 'T·∫£i ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng.',
            image: imagePath,
            token, // Tr·∫£ v·ªÅ token ƒë√£ c·∫≠p nh·∫≠t
            user: {
                _id: user._id,
                email: user.email,
                fullname: user.fullname,
                numberphone: user.numberphone,
                image: user.image,
                role: user.role
            }
        });
    } catch (err) {
        console.error('L·ªói t·∫£i ·∫£nh ƒë·∫°i di·ªán:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi t·∫£i ·∫£nh ƒë·∫°i di·ªán.' });
    }
};

// --- Qu·∫£n l√Ω t√†i kho·∫£n ph·ª• (Subuser) --- //

/**
 * @desc L·∫•y t·∫•t c·∫£ danh s√°ch Subuser c·ªßa m·ªôt Parent c·ª• th·ªÉ.
 * @route GET /api/users/subusers/parent/:parentId
 * @access Private (ch·ªâ parent ho·∫∑c admin m·ªõi c√≥ th·ªÉ xem subuser c·ªßa h·ªç)
 */
exports.getAllSubusersByParentId = async (req, res) => {
    try {
        const { parentId } = req.params; // L·∫•y parentId t·ª´ URL params

        if (!parentId || !mongoose.Types.ObjectId.isValid(parentId)) {
            return res.status(400).json({ success: false, message: 'Parent ID kh√¥ng h·ª£p l·ªá.' });
        }

        // T√¨m t·∫•t c·∫£ subuser c√≥ created_by l√† parentId
        const subusers = await User.find({ created_by: parentId, role: 'subuser' }).select('-password');

        res.status(200).json({
            success: true,
            message: 'L·∫•y danh s√°ch subuser th√†nh c√¥ng.',
            subusers
        });
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch subuser:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch subuser.' });
    }
};

/**
 * @desc L·∫•y th√¥ng tin m·ªôt Subuser c·ª• th·ªÉ b·∫±ng ID c·ªßa subuser ƒë√≥.
 * @route GET /api/users/subuser/:subuserId
 * @access Private (ch·ªâ parent c·ªßa subuser ƒë√≥ ho·∫∑c admin m·ªõi c√≥ th·ªÉ xem)
 */
exports.getSubuserById = async (req, res) => {
    try {
        const { subuserId } = req.params; // L·∫•y subuserId t·ª´ URL params

        if (!subuserId || !mongoose.Types.ObjectId.isValid(subuserId)) {
            return res.status(400).json({ success: false, message: 'Subuser ID kh√¥ng h·ª£p l·ªá.' });
        }

        // T√¨m subuser theo ID v√† ƒë·∫£m b·∫£o ƒë√≥ l√† subuser
        const subuser = await User.findOne({ _id: subuserId, role: 'subuser' }).select('-password');

        if (!subuser) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y subuser.' });
        }

        res.status(200).json({
            success: true,
            message: 'L·∫•y th√¥ng tin subuser th√†nh c√¥ng.',
            subuser
        });
    } catch (err) {
        console.error('L·ªói khi l·∫•y th√¥ng tin subuser:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y th√¥ng tin subuser.' });
    }
};

/**
 * @desc T·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin Subuser.
 * N·∫øu subuser v·ªõi `numberphone` v√† `parentId` ƒë√£ t·ªìn t·∫°i, s·∫Ω c·∫≠p nh·∫≠t.
 * N·∫øu ch∆∞a, s·∫Ω t·∫°o m·ªõi.
 * @route POST /api/users/subuser/create-or-update
 * @access Private (ch·ªâ parent m·ªõi c√≥ th·ªÉ t·∫°o/c·∫≠p nh·∫≠t subuser c·ªßa h·ªç)
 */
exports.createOrUpdateSubuser = async (req, res) => {
    try {
        let { numberphone, password, fullname, image, parentId } = req.body;
        const relationship = req.body.relationship || 'unknown';

        // --- CONSOLE LOG 1: Log to√†n b·ªô request body nh·∫≠n ƒë∆∞·ª£c ---
        console.log(`[DEBUG - createOrUpdateSubuser] Received request body: ${JSON.stringify(req.body)}`);

        // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i
        numberphone = normalizePhoneNumber(numberphone);
        // --- CONSOLE LOG 2: Log s·ªë ƒëi·ªán tho·∫°i sau khi chu·∫©n h√≥a ---
        console.log(`[DEBUG - createOrUpdateSubuser] Normalized numberphone: ${numberphone}`);

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!numberphone || !password || !parentId) {
            // --- CONSOLE ERROR 3: C·∫£nh b√°o l·ªói thi·∫øu tr∆∞·ªùng ---
            console.error(`[ERROR - createOrUpdateSubuser] Bad Request: Missing required fields. numberphone: ${!!numberphone}, password: ${!!password}, parentId: ${!!parentId}. Full Request Body: ${JSON.stringify(req.body)}`);
            return res.status(400).json({ success: false, message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin: s·ªë ƒëi·ªán tho·∫°i, m·∫≠t kh·∫©u, v√† Parent ID.' });
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng Parent ID
        if (!mongoose.Types.ObjectId.isValid(parentId)) {
            // --- CONSOLE ERROR 4: C·∫£nh b√°o l·ªói ƒë·ªãnh d·∫°ng Parent ID ---
            console.error(`[ERROR - createOrUpdateSubuser] Bad Request: Invalid Parent ID format provided: ${parentId}.`);
            return res.status(400).json({ success: false, message: 'Parent ID kh√¥ng h·ª£p l·ªá.' });
        }

        // ƒê·∫£m b·∫£o parentId t·ªìn t·∫°i v√† c√≥ role 'parent'
        const parent = await User.findOne({ _id: parentId, role: 'parent' });
        // --- CONSOLE LOG 5: Ki·ªÉm tra k·∫øt qu·∫£ t√¨m Parent ---
        console.log(`[DEBUG - createOrUpdateSubuser] Parent check result for ID ${parentId}: ${parent ? 'Found' : 'Not Found or wrong role'}`);
        if (!parent) {
            // --- CONSOLE ERROR 6: C·∫£nh b√°o Parent kh√¥ng t·ªìn t·∫°i ---
            console.error(`[ERROR - createOrUpdateSubuser] Bad Request: Parent account not found or does not have 'parent' role for ID: ${parentId}.`);
            return res.status(400).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n Parent v·ªõi Parent ID n√†y.' });
        }

        // Hash m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);
        // --- CONSOLE LOG 7: Th√¥ng b√°o m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c hash ---
        console.log(`[DEBUG - createOrUpdateSubuser] Password hashed successfully for numberphone: ${numberphone}`);

        // T√¨m subuser hi·ªán c√≥ b·∫±ng numberphone v√† parentId
        let subuser = await User.findOne({ numberphone, role: 'subuser', created_by: parentId });
        // --- CONSOLE LOG 8: Th√¥ng b√°o k·∫øt qu·∫£ t√¨m ki·∫øm subuser hi·ªán c√≥ ---
        console.log(`[DEBUG - createOrUpdateSubuser] Searching for existing subuser with numberphone ${numberphone} and created_by ${parentId}. Found: ${subuser ? 'Yes, ID: ' + subuser._id : 'No'}.`);


        if (subuser) {
            // --- CONSOLE INFO 9: B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t subuser ---
            console.log(`[INFO - createOrUpdateSubuser] Updating existing subuser (ID: ${subuser._id}) for parent (ID: ${parentId}).`);
            
            // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng
            subuser.password = hashedPassword;
            subuser.fullname = fullname ?? subuser.fullname;
            subuser.image = image ?? subuser.image;
            subuser.relationship = relationship;

            await subuser.save();
            // --- CONSOLE INFO 10: Th√¥ng b√°o c·∫≠p nh·∫≠t th√†nh c√¥ng ---
            console.log(`[INFO - createOrUpdateSubuser] Subuser (ID: ${subuser._id}) updated successfully.`);

            return res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t subuser th√†nh c√¥ng.', user: subuser });
        }

        // N·∫øu subuser ch∆∞a t·ªìn t·∫°i, ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng subuser
        const subuserCount = await User.countDocuments({ role: 'subuser', created_by: parentId });
        // --- CONSOLE LOG 11: Th√¥ng b√°o s·ªë l∆∞·ª£ng subuser hi·ªán t·∫°i ---
        console.log(`[DEBUG - createOrUpdateSubuser] Subuser count for parent ${parentId}: ${subuserCount}.`);
        
        if (subuserCount >= 10) {
            // --- CONSOLE WARN 12: C·∫£nh b√°o v∆∞·ª£t qu√° gi·ªõi h·∫°n subuser ---
            console.warn(`[WARN - createOrUpdateSubuser] Failed to create subuser: Parent ${parentId} has reached the limit of 10 subusers.`);
            return res.status(400).json({ success: false, message: 'T√†i kho·∫£n Parent ƒë√£ ƒë·∫°t gi·ªõi h·∫°n 10 subuser.' });
        }

        // T·∫°o email placeholder duy nh·∫•t cho subuser m·ªõi
        const uniqueEmail = `subuser_${Date.now()}_${crypto.randomBytes(4).toString('hex')}@fmcarer.com`;
        // --- CONSOLE LOG 13: Th√¥ng b√°o email placeholder ƒë∆∞·ª£c t·∫°o ---
        console.log(`[DEBUG - createOrUpdateSubuser] Generated unique email for new subuser: ${uniqueEmail}`);

        // T·∫°o subuser m·ªõi
        subuser = new User({
            numberphone,
            password: hashedPassword,
            fullname: fullname || '',
            image: image || '',
            role: 'subuser',
            created_by: parentId,
            email: uniqueEmail
        });

        await subuser.save();
        // --- CONSOLE INFO 14: Th√¥ng b√°o t·∫°o subuser m·ªõi th√†nh c√¥ng ---
        console.log(`[INFO - createOrUpdateSubuser] New subuser created successfully. Subuser ID: ${subuser._id}.`);

        return res.status(201).json({ success: true, message: 'T·∫°o subuser th√†nh c√¥ng.', user: subuser });

    } catch (error) {
        // --- CONSOLE ERROR 15: Log l·ªói t·ªïng qu√°t (quan tr·ªçng) ---
        console.error(`[CRITICAL ERROR - createOrUpdateSubuser] Caught exception: ${error.message}`);
        console.error(`Stack trace:`, error.stack); // Hi·ªÉn th·ªã stack trace
        console.error(`Request body that caused error:`, req.body); // Hi·ªÉn th·ªã request body g√¢y l·ªói
        console.error(`Full error object:`, error); // Hi·ªÉn th·ªã to√†n b·ªô ƒë·ªëi t∆∞·ª£ng l·ªói

        // X·ª≠ l√Ω l·ªói tr√πng l·∫∑p email (MongoDB E11000 duplicate key error)
        if (error.code === 11000 && error.keyPattern && error.keyPattern.email) {
            // --- CONSOLE WARN 16: C·∫£nh b√°o l·ªói tr√πng l·∫∑p email ---
            console.warn(`[WARN - createOrUpdateSubuser] Duplicate email error detected during subuser creation/update. Email pattern: ${JSON.stringify(error.keyPattern)}`);
            return res.status(400).json({ success: false, message: 'L·ªói tr√πng l·∫∑p email. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.' });
        }
        
        // Tr·∫£ v·ªÅ l·ªói server m·∫∑c ƒë·ªãnh
        res.status(500).json({ success: false, message: 'L·ªói server khi x·ª≠ l√Ω subuser.', error: error.message });
    }
};

/**
 * @desc X√≥a m·ªôt Subuser c·ª• th·ªÉ.
 * @route DELETE /api/users/subuser/:subuserId
 * @access Private (ch·ªâ parent c·ªßa subuser ƒë√≥ ho·∫∑c admin m·ªõi c√≥ th·ªÉ x√≥a)
 */
exports.deleteSubuser = async (req, res) => {
    try {
        const { subuserId } = req.params; // L·∫•y ID c·ªßa subuser c·∫ßn x√≥a t·ª´ URL params

        if (!subuserId || !mongoose.Types.ObjectId.isValid(subuserId)) {
            return res.status(400).json({ success: false, message: 'ID subuser kh√¥ng h·ª£p l·ªá.' });
        }

        // T√¨m v√† x√≥a subuser. ƒê·∫£m b·∫£o ch·ªâ x√≥a subuser
        const result = await User.deleteOne({ _id: subuserId, role: 'subuser' });

        if (result.deletedCount === 0) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y subuser ƒë·ªÉ x√≥a ho·∫∑c kh√¥ng ph·∫£i l√† subuser.' });
        }

        res.status(200).json({ success: true, message: 'X√≥a subuser th√†nh c√¥ng.' });
    } catch (err) {
        console.error('L·ªói khi x√≥a subuser:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a subuser.' });
    }
};

/**
 * @desc ƒêƒÉng nh·∫≠p t√†i kho·∫£n Subuser.
 * @route POST /api/users/login-subuser
 * @access Public
 */
exports.loginSubuser = async (req, res) => {
    try {
        let { numberphone, password } = req.body;

        // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi s·ª≠ d·ª•ng ƒë·ªÉ t√¨m ki·∫øm
        numberphone = normalizePhoneNumber(numberphone);

        if (!numberphone || !password) {
            return res.status(400).json({ success: false, message: 'Thi·∫øu s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u.' });
        }

        // T√¨m ng∆∞·ªùi d√πng v·ªõi numberphone v√† role 'subuser'
        const user = await User.findOne({ numberphone, role: 'subuser' });
        if (!user) {
            return res.status(400).json({ success: false, message: 'S·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u sai.' });
        }

        // So s√°nh m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ success: false, message: 'S·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u sai.' });
        }

        // T·∫°o JWT token cho subuser
        const token = generateToken({ userId: user._id, role: user.role });

        res.status(200).json({
            success: true,
            message: 'ƒêƒÉng nh·∫≠p subuser th√†nh c√¥ng!',
            token, // Tr·∫£ v·ªÅ token cho client
            user: {
                _id: user._id,
                numberphone: user.numberphone,
                fullname: user.fullname,
                role: user.role,
                image: user.image,
                created_by: user.created_by,
                relationship: user.relationship
            }
        });
    } catch (err) {
        console.error('L·ªói ƒëƒÉng nh·∫≠p subuser:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi ƒëƒÉng nh·∫≠p subuser.' });
    }
};

// h√†m x√°c th·ª±c m·∫≠t kh·∫©u 
exports.verifyPassword = async (req, res) => {
    try {
        const { userId, password } = req.body;

        if (!userId || !password) {
            return res.status(400).json({ success: false, message: 'Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u.' });
        }

        const user = await User.findById(userId);

        if (!user) {
            return res.status(404).json({ success: false, message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
        }

        // So s√°nh m·∫≠t kh·∫©u ƒë∆∞·ª£c cung c·∫•p v·ªõi m·∫≠t kh·∫©u ƒë√£ hash trong DB
        const isMatch = await bcrypt.compare(password, user.password);

        if (!isMatch) {
            return res.status(401).json({ success: false, message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
        }

        res.status(200).json({ success: true, message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.' });

    } catch (err) {
        console.error('L·ªói khi x√°c th·ª±c m·∫≠t kh·∫©u:', err);
        res.status(500).json({ success: false, message: 'L·ªói server khi x√°c th·ª±c m·∫≠t kh·∫©u.' });
    }
};