const User = require('../models/User');
const OTP = require('../models/OTP');
const sendEmail = require('../utils/sendEmail');
const bcrypt = require('bcrypt');
const mongoose = require('mongoose');

// ‚úÖ ƒêƒÉng k√Ω t√†i kho·∫£n cha m·∫π
exports.registerParent = async (req, res) => {
  try {
    const { email, password } = req.body;
    const existing = await User.findOne({ email });
    if (existing) {
      return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });
    }

    const hash = await bcrypt.hash(password, 10);
    await User.create({ email, password: hash, isVerified: false });

    // G·ª≠i OTP n·∫øu ch∆∞a c√≥ (ch∆∞a h·∫øt h·∫°n)
    const existingOtp = await OTP.findOne({ email, expiresAt: { $gt: new Date() } });
    if (!existingOtp) {
      const code = Math.floor(100000 + Math.random() * 900000).toString();
      await OTP.create({
        email,
        code,
        expiresAt: new Date(Date.now() + 5 * 60 * 1000)
      });
      await sendEmail(email, 'M√£ x√°c th·ª±c t√†i kho·∫£n FMCarer', `M√£ OTP c·ªßa b·∫°n l√†: ${code}`);
    }

    res.status(200).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email.' });
  } catch (err) {
    console.error('ƒêƒÉng k√Ω l·ªói:', err);
    res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng k√Ω.' });
  }
};

// ‚úÖ X√°c minh OTP
exports.verifyOTP = async (req, res) => {
  try {
    const { email, code } = req.body;
    const record = await OTP.findOne({ email });

    if (!record || record.code !== code || record.expiresAt < new Date()) {
      return res.status(400).json({ message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    const user = await User.findOneAndUpdate({ email }, { isVerified: true }, { new: true });
    await OTP.deleteMany({ email });

    res.status(200).json({
      message: 'X√°c minh th√†nh c√¥ng!',
      user: {
        _id: user._id,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified
      }
    });
  } catch (err) {
    console.error('OTP l·ªói:', err);
    res.status(500).json({ message: 'L·ªói server khi x√°c minh OTP.' });
  }
};

// ‚úÖ ƒêƒÉng nh·∫≠p (email d√πng cho parent)
exports.loginParent = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ success: false, message: 'Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ success: false, message: 'Sai m·∫≠t kh·∫©u' });

    res.status(200).json({
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
      user: {
        _id: user._id,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified,
        fullname: user.fullname,
        numberphone: user.numberphone,
        image: user.image
      }
    });
  } catch (err) {
    console.error('ƒêƒÉng nh·∫≠p l·ªói:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi ƒëƒÉng nh·∫≠p.' });
  }
};

// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUser = async (req, res) => {
  try {
    const { _id, fullname, numberphone, image } = req.body;

    if (!_id) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu _id ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t.'
      });
    }

    const user = await User.findById(_id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.'
      });
    }

    if (fullname !== undefined) user.fullname = fullname;
    if (numberphone !== undefined) user.numberphone = numberphone;
    if (image !== undefined) user.image = image;

    await user.save();

    return res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng.',
      user: {
        _id: user._id,
        email: user.email,
        fullname: user.fullname,
        numberphone: user.numberphone,
        image: user.image,
        role: user.role
      }
    });
  } catch (err) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t user:', err);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng.'
    });
  }
};

// ‚úÖ Upload ·∫£nh ƒë·∫°i di·ªán
exports.uploadAvatar = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ success: false, message: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n' });
    }

    const imageUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;

    return res.status(200).json({
      success: true,
      message: 'T·∫£i ·∫£nh th√†nh c√¥ng',
      imageUrl
    });
  } catch (error) {
    console.error('L·ªói upload:', error);
    return res.status(500).json({ success: false, message: 'L·ªói server khi upload ·∫£nh' });
  }
};

;


// ‚úÖ T·∫°o ho·∫∑c c·∫≠p nh·∫≠t SubUser d·ª±a tr√™n s·ªë ƒëi·ªán tho·∫°i & parentId
exports.createOrUpdateSubuserByPhone = async (req, res) => {
  try {
    const { numberphone, password, fullname, image, parentId, relationship } = req.body;

    console.log('üì• Nh·∫≠n y√™u c·∫ßu t·∫°o/c·∫≠p nh·∫≠t SubUser:', req.body);

    // üìå Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!numberphone?.trim() || !password?.trim() || !parentId?.trim()) {
      return res.status(400).json({
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (s·ªë ƒëi·ªán tho·∫°i, m·∫≠t kh·∫©u, parentId)'
      });
    }

    // üìå Ki·ªÉm tra parentId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(parentId)) {
      return res.status(400).json({ message: 'parentId kh√¥ng h·ª£p l·ªá' });
    }

    // üìå Ki·ªÉm tra xem parent c√≥ t·ªìn t·∫°i kh√¥ng
    const parent = await User.findOne({ _id: parentId, role: 'parent' });
    if (!parent) {
      return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n cha (parent)' });
    }

    // üìå M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // üìå Ki·ªÉm tra n·∫øu SubUser ƒë√£ t·ªìn t·∫°i theo s·ªë ƒëi·ªán tho·∫°i v√† parentId
    let subuser = await User.findOne({ numberphone, role: 'subuser', created_by: parentId });

    if (subuser) {
      // ‚úÖ N·∫øu t·ªìn t·∫°i ‚Üí c·∫≠p nh·∫≠t l·∫°i
      subuser.password = hashedPassword;
      subuser.fullname = fullname || subuser.fullname;
      subuser.image = image || subuser.image;
      await subuser.save();

      return res.status(200).json({
        message: 'C·∫≠p nh·∫≠t t√†i kho·∫£n ph·ª• th√†nh c√¥ng',
        user: subuser
      });
    }

    // üìå Ki·ªÉm tra s·ªë l∆∞·ª£ng subuser c·ªßa parent
    const count = await User.countDocuments({ role: 'subuser', created_by: parentId });
    if (count >= 10) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ t·∫°o t·ªëi ƒëa 10 t√†i kho·∫£n ph·ª•' });
    }

    // ‚úÖ N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi subuser
    subuser = new User({
      numberphone,
      password: hashedPassword,
      fullname: fullname || '',
      image: image || '',
      role: 'subuser',
      created_by: parentId,
      email: null // Email kh√¥ng c·∫ßn thi·∫øt cho subuser
    });

    await subuser.save();

    return res.status(201).json({
      message: 'T·∫°o t√†i kho·∫£n ph·ª• th√†nh c√¥ng',
      user: subuser
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω SubUser:', error.message);
    return res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};